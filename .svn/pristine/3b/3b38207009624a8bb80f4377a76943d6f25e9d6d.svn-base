import { Component, OnInit, Input, OnChanges } from '@angular/core';
import { BaseComponent } from '../../../acore/base';
import { DesktopService } from '../desktop.service';
import { UserAccountModel } from './user-profile.model';
import { UrlConstants, SessionObject, ProjectUtils } from '../../../acore/utility';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { ProjectService, ConstantService } from '../../../acore/services';
import { Constants } from 'ag-grid';

@Component({
  selector: 'app-user-profile',
  templateUrl: './user-profile.component.html',
  styleUrls: ['./user-profile.component.css']
})
export class UserProfileComponent extends BaseComponent {
  myNavData: any = {};
  activeLink: any = null;
  NAME_VIEW_ACCOUNT_USER = 'VIEW_ACCOUNT_USER';
  NAME_UPDATE_ACCOUNT_USER = 'UPDATE_ACCOUNT_USER';
  NAME_COUNRTY_LIST = 'COUNRTY_LIST';
  NAME_USER_ROLE = 'USER_ROLE';
  state = true;
  message: string;

  countryDropList: Array<any> = [];
  userRoleList: Array<any> = [];

  userAccountModel: UserAccountModel;

  constructor(private desktopService: DesktopService,
    protected projectService: ProjectService,
    public constantService: ConstantService) {
    super(desktopService, projectService);
    this.myNavData = this.constantService.routerNav.myAccount;
    this.activeLink = this.constantService.routerNav.myAccount.links[0];
    this.message = '';
  }

  xtBaseOnInit() {
    this.countryList();
    this.userRole();
    this.viewUserDetails();
  }

  initSearchModels() {
    this.userAccountModel = new UserAccountModel();
    const counterReportsSession = ProjectUtils.getCounterReports();
  }

  getSearchModel(name: string) {
    if (name === this.NAME_UPDATE_ACCOUNT_USER) {
      return this.userAccountModel;
    }
  }

  countryList() {
    this.loadDataFromApi(this.NAME_COUNRTY_LIST)
      .subscribe((data) => {
        this.countryDropList = data.padCountry;
      },
        (err) => {
        });
  }

  userRole() {
    this.loadDataFromApi(this.NAME_USER_ROLE)
      .subscribe((data) => {
        this.userRoleList = data.padRole;
      },
        (err) => {
        });
  }

  setSearchModel(name: string) {
    const searchModel = this.getValueFromSearchModel(name);
    if (name === this.NAME_UPDATE_ACCOUNT_USER) {
      ProjectUtils.setCounterReports(searchModel);
    }
  }

  getServiceUrl(name): string {
    if (name === this.NAME_COUNRTY_LIST) {
      return UrlConstants.COUNTRY_LIST;
    } else if (name === this.NAME_USER_ROLE) {
      return UrlConstants.USER_ROLE;
    } else if (name === this.NAME_UPDATE_ACCOUNT_USER) {
      return UrlConstants.UPDATE_USER;
    }
  }

  updateUserAccount() {
    this.message = '';
    this.showLoader();
    this.loadDataFromApi(this.NAME_UPDATE_ACCOUNT_USER)
      .subscribe((data) => {
        this.state = true;
        if (data.responseStatus === 'User updated successfully') {
          this.message = 'User has been updated successfully.';
          ProjectUtils.html.showMsgForDuration('My-Account-Details');
        }
        this.hideLoader();
      }, (err) => {
        this.state = false;
        this.message = 'Something Went Wrong.';
        ProjectUtils.html.showMsgForDuration('My-Account-Details');
        this.hideLoader();
      });
  }

  viewUserDetails() {
    const viewcurentUserDetails = ProjectUtils.getSessionObject();
    this.userAccountModel.id.value = viewcurentUserDetails.userDetails.padUser.id;
    this.userAccountModel.role.value = viewcurentUserDetails.userDetails.padUser.roleId;
    this.userAccountModel.fName.value = viewcurentUserDetails.userDetails.padUser.firstName;
    this.userAccountModel.lName.value = viewcurentUserDetails.userDetails.padUser.lastName;
    this.userAccountModel.address.value = viewcurentUserDetails.userDetails.padUser.address;
    this.userAccountModel.city.value = viewcurentUserDetails.userDetails.padUser.addCity;
    this.userAccountModel.email.value = viewcurentUserDetails.userDetails.padUser.email;
    this.userAccountModel.state.value = viewcurentUserDetails.userDetails.padUser.addState;
    this.userAccountModel.zipCode.value = viewcurentUserDetails.userDetails.padUser.addPincode;
    this.userAccountModel.phone.value = viewcurentUserDetails.userDetails.padUser.phoneNo;
  }

  doOnReset() {
    this.viewUserDetails();
  }

}
