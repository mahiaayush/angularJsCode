import { SessionObject } from './session-object';
import { Utils } from '../util';

export class ProjectUtils extends Utils {
      public static GRIDWIDTH = 1180;
      public static setSessionObject(sessionObject: SessionObject) {
            localStorage.setItem('sessionObject', JSON.stringify(sessionObject));
      }

      public static getSessionObject(): SessionObject {
            const sessionObject = <SessionObject>JSON.parse(localStorage.getItem('sessionObject'));
            return sessionObject;
      }

      public static clearSessionObjects() {
            localStorage.removeItem('sessionObject');
      }

      public static setDashBoardPost(dashBoardSearchModel: any) {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            sessionObject.dashBoardPost = dashBoardSearchModel;
            ProjectUtils.setSessionObject(sessionObject);
      }

      public static getDashBoardPost() {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            return sessionObject.dashBoardPost;
      }

      public static setDashBoardSec(dashBoardSecSearchModel: any) {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            sessionObject.dashBoardSec = dashBoardSecSearchModel;
            ProjectUtils.setSessionObject(sessionObject);
      }

      public static getDashBoardSec() {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            return sessionObject.dashBoardSec;
      }

      public static setCounterReports(counterReportsSearchModel: any) {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            sessionObject.counterReports = counterReportsSearchModel;
            ProjectUtils.setSessionObject(sessionObject);
      }

      public static getCounterReports() {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            return sessionObject.counterReports;
      }
      public static setDynamicReports(dynamicReportsSearchModel: any) {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            sessionObject.dynamicReports = dynamicReportsSearchModel;
            ProjectUtils.setSessionObject(sessionObject);
      }

      public static getDynamicReports() {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            return sessionObject.dynamicReports;
      }


      public static setCustomReports(customReportsSearchModel: any) {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            sessionObject.customReports = customReportsSearchModel;
            ProjectUtils.setSessionObject(sessionObject);
      }

      public static getCustomReports() {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            return sessionObject.sourceReports;
      }

      public static setSourceReports(sourceReportsSearchModel: any) {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            sessionObject.sourceReports = sourceReportsSearchModel;
            ProjectUtils.setSessionObject(sessionObject);
      }

      public static setIssnIsbnReports(isnIsbnReportsSearchModel: any) {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            sessionObject.issnIsbnReports = isnIsbnReportsSearchModel;
            ProjectUtils.setSessionObject(sessionObject);
      }

      public static getSourceReports() {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            return sessionObject.sourceReports;
      }

      public static getIssnIsbnReports() {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            return sessionObject.issnIsbnReports;
      }


      public static setDashBoardCharts(sourceDashBoardCharts: any) {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            sessionObject.dashBoardCharts = sourceDashBoardCharts;
            ProjectUtils.setSessionObject(sessionObject);
      }

      public static getDashBoardCharts() {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            return sessionObject.dashBoardCharts;
      }

      public static setZeroUsageJournal(zeroUsageSearchModel: any) {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            sessionObject.zeroUsageJournal = zeroUsageSearchModel;
            ProjectUtils.setSessionObject(sessionObject);
      }

      public static getZeroUsageJournal() {
            const sessionObject: SessionObject = ProjectUtils.getSessionObject();
            return sessionObject.zeroUsageJournal;
      }


      public static svgCsv(value: any) {
            if ((value.value).includes('csv')) {
                  return '<img src="./assets/images/csv.svg"  class="curPointer" />';
            }
            return 'File not available';
      }

      public static svgExcel(value: any) {
            if ((value.value).includes('xls')) {
                  return '<img src="./assets/images/excel.svg"  class="curPointer" />';
            }
            return 'File not available';
      }
      public static svgZip(value: any) {
            if ((value.value).includes('zip')) {
                  return '<img src="./assets/images/zip.svg" class="curPointer" />';
            }
            return 'File not available';
      }
      public static svgText(value: any) {
            if ((value.value).includes('txt')) {
                  return '<i class="fa fa-file-text curPointer" style="font-size:20px"></i>';
            }
            return 'File not available';
      }
      public static svgHtml(value: any) {
            if ((value.value).includes('html')) {
                  return '<i class="fa fa-html5 curPointer" style="font-size:20px"></i>';
            }
            return 'File not available';
      }
      public static svgXml(value: any) {
            if ((value.value).includes('xml')) {
                  return '<i class="fa fa-file-code-o curPointer" style="font-size:20px"></i>';
            }
            return 'File not available';
      }
      // 'csv,xls,xml,html,txt'
      public static ag_SetWidth(perc: number) {
            return (ProjectUtils.GRIDWIDTH * perc) / 100;
      }

      public static message(value: any) {
            const anchor = '<a href="javascript:;"></a>';
            return anchor;

      }

      public static ag_ColorDiv(header: any) {
            // color = '#090' || '#F90';
            // if(header === ){
            const temp = '<div style="width:10px;height:10px;border:1px solid #000; background:#090;"></div>';
            return temp;
            // }else if(header === ){
            //       const temp = '<div style="width:10px;height:10px;border:1px solid #000; background: #F90";"></div>';
            //       return temp; 
            // }

      }

      public static filterDataFromDataKey(data: any) {
            if (data['data']) {
                  return data['data'];
            } else {
                  return data;
            }
      }

}
