import { Component, OnInit, ViewChild } from '@angular/core';
import { GridApi, ColumnApi, ColDef, GridOptions } from 'ag-grid';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { Subject } from 'rxjs/Subject';
import { BaseComponent, GridAPII } from '../../../acore/base';
import { MetadataProcessiongStatusModel } from './metadata-processing-status.model';
import { PadProjectService } from '../pad-project.service';
import { columnDefsMetadataProcessing } from './metadata-processing-status.data';
import { UrlConstants, SessionObject, ProjectUtils } from '../../../acore/utility';
import { DataDropDownOptions, AutoCompleteModel, TabsComponent } from '../../../acore/components';
import { ConstantService, ProjectService } from '../../../acore/services';
import { Router } from '@angular/router';

@Component({
  selector: 'app-metadata-processing-status',
  templateUrl: './metadata-processing-status.component.html',
  styleUrls: ['./metadata-processing-status.component.css']
})
export class MetadataProcessingStatusComponent extends BaseComponent {
  ngstatus: any;
  NAME_METADATA_PROCESSING = 'METADATA_PROCESSING';
  metadataProcessiongStatusModel: MetadataProcessiongStatusModel;
  myNavData: any = {};
  activeLink: any = null;
  isShow: boolean;
  rowData: any;
  customReInitMetadataDetails: Subject<any> = new Subject();
  isVisible: boolean;

  gridOptionsVenderReports: GridOptions = {};
  ddOptionsStatus: DataDropDownOptions;
  ddTriggerStatus: Subject<any> = new Subject();
  @ViewChild('metadataProcessingDetails') metadataProcessingDetailsTemplate;
  @ViewChild(TabsComponent) tabsComponent;

  constructor(private padProjectService: PadProjectService,
    public constantService: ConstantService,
    protected projectService: ProjectService,
    private router: Router) {
    super(padProjectService, projectService);
    this.myNavData = constantService.routerNav.PAD_PROJECT;
    this.activeLink = constantService.routerNav.PAD_PROJECT.links[2];
    this.gridOptions.onCellClicked = this.agCellClicked;
    this.isShow = false;
    this.isVisible = true;

  }

  // doInitialSetup() {

  //   this.ddOptionsStatus = new DataDropDownOptions();
  //   this.ddOptionsStatus.keyName = 'id';
  //   this.ddOptionsStatus.keyDesc = 'value';
  //   this.ddOptionsStatus.firstOptionText = 'Select a XML status';
  //   this.ddOptionsStatus.modelName = 'xmlStatus';
  //   this.ddOptionsStatus.loader = this.baseLoader;
  // }

  // xtBaseAfterViewInit() {
  //   this.ddTriggerStatus.next(this.padProjectService.getDropdownType());
  // }

  agCellClicked = (event) => {

    const headerName: string = event.colDef.headerName;
    this.rowData = event['data'];
    if (headerName === 'XML File Name' && this.rowData.uploadedfilestatus !== 'Processed') {
      this.openListTab();
    }

  }

  restrictNumeric(e: any) {
    return ProjectUtils.html.numericValidation(e);
  }

  xtBaseOnInit() {

  }

  openListTab() {

    this.tabsComponent.openTab('Metadata Processing Details',
      this.metadataProcessingDetailsTemplate, {}, true, 'metadataProcessingDetailsTemplate');
    this.customReInitMetadataDetails.next(this.rowData);
  }

  initSearchModels() {
    this.metadataProcessiongStatusModel = new MetadataProcessiongStatusModel();
    const counterReportsSession = ProjectUtils.getCounterReports();
    // this.setValueFromSession(this.metadataProcessiongStatusModel, counterReportsSession);

  }


  getSearchModel(name: string) {
    if (name === this.NAME_METADATA_PROCESSING) {
      return this.metadataProcessiongStatusModel;
    } else {
      return this.metadataProcessiongStatusModel;
    }
  }

  setSearchModel(name: string) {
    const searchModel = this.getValueFromSearchModel(name);
    if (name === this.NAME_METADATA_PROCESSING) {
      ProjectUtils.setCounterReports(searchModel);
    } else {
      ProjectUtils.setCounterReports(searchModel);
    }
  }


  setColumnDef(name: string): Array<ColDef> {
    if (name === this.NAME_METADATA_PROCESSING) {
      return columnDefsMetadataProcessing;
    }
  }

  getServiceUrl(name): string {
    if (name === this.NAME_METADATA_PROCESSING) {
      return UrlConstants.META_PROCESSING_STATUS;
    }
  }

  doOnSubmit(e) {
    console.log('doOnSubmit', e);
    this.isShow = true;
    this.isVisible = false;
    this.OnSubmit(this.NAME_METADATA_PROCESSING, false);

  }

  xtBaseLoadDataFromApiProcessData(name: string, data: Array<any>) {

    this.bindDataToGrid(this.NAME_METADATA_PROCESSING, data);

  }

  getGridApi(name: string): GridAPII {
    if (name === this.NAME_METADATA_PROCESSING) {
      return {
        gridApi: this.gridApi,
        columnApi: this.columnApi
      };
    }
  }

  doOnGridReadyMetaProcessingReports(api) {
    this.gridApi = api.api;
    this.columnApi = api.columnApi;
    this.isShow = true;
    this.isVisible = false;
    this.doOnGridReady(this.NAME_METADATA_PROCESSING);
    this.OnSubmit(this.NAME_METADATA_PROCESSING, false);
  }

  getScrollCordinates(name: string) {
    if (this.NAME_METADATA_PROCESSING === name) {
      return {
        x: 0,
        y: 375
      };
    }
  }

  xtBaseOnDestroy() {
    ProjectUtils.unsubscribe(this.customReInitMetadataDetails);
  }

}

