import { Component, OnInit, Output, EventEmitter, Input, OnChanges } from '@angular/core';
import { GridOptions, GridApi, ColumnApi, ColDef } from 'ag-grid';

import { Subject } from 'rxjs/Subject';
import { Observable } from 'rxjs/Observable';

@Component({
  selector: 'app-ag-grid',
  templateUrl: './ag-grid.component.html',
  styleUrls: ['./ag-grid.component.css']
})
export class AgGridComponent implements OnInit, OnChanges {


  @Input() context: any;
  @Input() frameworkComponents: any;
  @Input() getRowHeight: any;
  @Input() paging = true;
  @Input() export = true;

  @Input() name;
  @Input() myGridOptions: GridOptions = {};
  @Input() rowSelection: any;
  @Input() fileName: string;
  @Output() myGridReady: EventEmitter<any> = new EventEmitter();
  @Input() newSetup: Subject<any> = new Subject();


  totalEntries: number = null;
  pageSize: number = null;

  gridApi: GridApi | any;
  columnApi: ColumnApi;
  totalPages: number = null;
  pagesArray: Array<number> = [];
  lastSelectedPageEle: any = null;
  lastSelectedPage = 0;

  gridOptions: GridOptions;
  columnDefs: any[];
  rowData: any[];
  constructor() {
    this.gridOptions = <GridOptions>{};
  }

  ngOnChanges() {

    this.gridOptions = this.myGridOptions;
  }
  ngOnInit() {

    this.rowSelection = (this.rowSelection !== undefined) ? this.rowSelection : 'multiple';
    console.log('rowSelection', this.rowSelection);
  }
  onPageSizeChanged(newPageSize) {
    this.pageSize = Number(newPageSize);
    this.myGridOptions.api.paginationSetPageSize(Number(newPageSize));

    this.newSetup.next(this.gridApi.paginationGetTotalPages());
  }


  onGridReady(api) {

    this.gridApi = api.api;

    // this.gridApi.setColumnDefs(this.columnDefs);
    // this.gridApi.setRowData(this.rowData);
    //  this.gridApi.sizeColumnsToFit();
    this.columnApi = api.columnApi;
    this.myGridReady.emit(api);
    this.onRowDataChanged(null);
  }

  onRowDataChanged(event) {

    // this.totalPages = 0;
    // this.totalPages = this.gridApi.paginationGetTotalPages();
    if (this.gridApi) {

      this.pageSize = this.gridApi.paginationGetPageSize() || this.gridOptions.paginationPageSize;
      this.totalEntries = this.gridApi.totalRowCount || (this.gridOptions.rowData && this.gridOptions.rowData.length) || 0;


      this.newSetup.next(this.gridApi.paginationGetTotalPages());
      // this.generatePages();
      console.log('onRowDataChanged', this.totalPages);

      const allColumnIds = [];
      this.columnApi.getAllColumns()
        .forEach(function (column: any) {
          allColumnIds.push(column.colId);
        });

      this.columnApi.autoSizeColumns(allColumnIds);
    }

  }
  onRowDataUpdated(event) {
    console.log('onRowDataUpdated');
  }

  onQuickFilterChanged($event) {
    this.gridApi.setQuickFilter($event.target.value);
    this.newSetup.next(this.gridApi.paginationGetTotalPages());
  }

  onBtExport() {
    const params: any = {
      skipHeader: false,
      skipFooters: true,
      skipGroups: true,
      fileName: this.fileName || 'export.csv'
    };
    this.gridApi.exportDataAsCsv(params);
  }

  onBtExportExcel() {
    const params: any = {
      skipHeader: false,
      skipFooters: true,
      skipGroups: true,
      fileName: this.fileName || 'export.xlsx'
    };
    this.gridApi.exportDataAsExcel(params);
  }

  onBtFirst() {
    this.gridApi.paginationGoToFirstPage();
  }

  onBtLast() {
    this.gridApi.paginationGoToLastPage();
  }

  onBtNext() {
    this.gridApi.paginationGoToNextPage();
  }

  onBtPrevious() {
    this.gridApi.paginationGoToPreviousPage();
  }

  onNthPage(num: number) {
    this.gridApi.paginationGoToPage(num);
  }



  // generatePages() {
  //   for (let i = 0; i < this.totalPages; i++) {
  //     this.pagesArray.push(i + 1);
  //   }
  // }

  // onPageClick(pageNum, ele) {
  //   if (this.lastSelectedPageEle !== ele) {
  //     ele.classList.add('active');
  //     if (this.lastSelectedPageEle) {
  //       this.lastSelectedPageEle.classList.remove('active');
  //     }
  //     this.lastSelectedPageEle = ele;
  //     this.lastSelectedPage = pageNum;
  //   }

  //   this.pageSwitching(pageNum);
  // }

  onPageChanged(val: string | number) {
    switch (val) {
      case 'first': this.gridApi.paginationGoToFirstPage();
        break;
      case 'last': this.gridApi.paginationGoToLastPage();
        break;

      case 'next': this.gridApi.paginationGoToNextPage();
        break;

      case 'prev': this.gridApi.paginationGoToPreviousPage();
        break;

      default: this.gridApi.paginationGoToPage(<number>val - 1);
        break;
    }
  }

  onFilterChanged(api) {
    this.newSetup.next(this.gridApi.paginationGetTotalPages());
  }

}
