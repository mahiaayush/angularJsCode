import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { HttpService } from '../services/custom-http/';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';

import 'rxjs/add/observable/throw';

import { ProjectUtils } from '../utility';

@Injectable()

export abstract class BaseService {



      getServiceUrl(name: string): string {
            return null;
      }

      constructor(
            protected http?: HttpService
      ) {
            this.xtBaseConstructor();
      }

      xtBaseConstructor() {

      }


      uploadData(strURL: string, body: any) {
            return this.http.extractPostData(strURL, body, '')
                  .map(this.extractData)
                  .catch(this.handleError);
      }


      getDataFromAPI(strURL: string, body: any, responseType?: string): Observable<any> {
            let tokenId = null;
            tokenId = `MTIzNDV+I342MjQyNg==`;
            if (!responseType) {
                  this.getResponseType();
            }

            body = this.getBasicRequiredQueryString(body);

            if (body[0] === '&') {
                  body = '?' + body.substring(1);
            } else if (body[0] !== '?') {
                  body = '?' + body;
            }
            strURL += body;
            return this.http.extractPostData(strURL, '', tokenId, responseType)
                  .map(this.extractData)
                  .catch(this.handleError);
      }


      getBasicRequiredQueryString(queryString: string): string {
            const userDetails = ProjectUtils.getSessionObject().userDetails;
            queryString += '&user_id=' + '1864470'; // userDetails.userID;
            return queryString;
      }


      getResponseType(): string {
            return '';
      }


      protected extractData(res: any) {

            return res;
      }

      protected handleError(error: any) {
            // In a real world app, we might use a remote logging infrastructure
            // We'd also dig deeper into the error to get a better message
            const errMsg = (error.message) ? error.message :
                  error.status ? `${error.status} - ${error.statusText}` : 'Server error';
            console.error(errMsg); // log to console instead
            return Observable.throw(errMsg);
      }
}


