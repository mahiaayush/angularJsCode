import { Component, OnInit, AfterViewInit, ViewChildren } from '@angular/core';
import { Router } from '@angular/router';
import { CustomModalPopUpModel, CustomModalPopUpService } from '../../../acore/components/custom-modal-pop-up';
import { UrlConstants, SessionObject, ProjectUtils } from '../../../acore/utility';
import { PathConstants } from '../../../acore/services';

import { DesktopService } from '../desktop.service';
import { BaseComponent } from '../../../acore/base';

import {
  TopMenuNavigationData
} from './top-menu.navigation.data';
import { Utils } from 'ag-grid';

@Component({
  selector: 'app-top-menu',
  templateUrl: './top-menu.component.html',
  styleUrls: ['./top-menu.component.css']
})
export class TopMenuComponent extends BaseComponent implements OnInit, AfterViewInit {


  @ViewChildren('tabNavLinks') tabNavLinks: any;

  showModelPopup: boolean;

  reportNav: any = {};
  padNav: any = {};
  userMagNav: any = {};

  tabLookNav: any = {};
  reportType: string = null;
  reportName: string = null;

  basicSetting: CustomModalPopUpModel;
  LoginUserName: string;

  constructor(
    private customModalPopUpServiceprivate: CustomModalPopUpService,
    private router: Router,
    private desktopService: DesktopService,
    public pathConstants: PathConstants) {
    super(desktopService);
    this.reportNav = TopMenuNavigationData.REPORT;
    this.padNav = TopMenuNavigationData.PAD_PROJECT;
    this.userMagNav = TopMenuNavigationData.USER_MANAGEMENT;
    this.createMyPopUpAdd();

    this.searchMyRouteLink();

    const displayUserName = ProjectUtils.getSessionObject();
    this.LoginUserName = displayUserName.userDetails.firstName + ' ' + displayUserName.userDetails.lastName;
    this.setLinkDataNames(this.userMagNav.links[0].label, this.userMagNav);


  }

  searchMyRouteLink() {
    const url = this.router.url.split('/');
    const lastLink = url[url.length - 1];


  }


  changeTabLookNav(navBar) {
    this.tabLookNav = navBar;
  }

  onTabLookNavClick() {

  }

  ngOnInit() {
  }

  ngAfterViewInit() {
    this.setClassActiveToNavLinks(0);
  }


  createMyPopUpAdd() {
    this.basicSetting = new CustomModalPopUpModel();
    this.basicSetting.id = 'profile';
    this.basicSetting.title = 'Update Your Account';
    this.basicSetting.noButtons = true;
    this.basicSetting.upperCross = true;
  }



  loggedInUserDetail() {
    this.customModalPopUpServiceprivate.show(this.basicSetting);
    this.showModelPopup = !this.showModelPopup;
  }

  myNavFunc(link: Array<string>, linkIndex: number, linkLabel: string, linkData: any) {
    this.router.navigate(link);
    this.setLinkDataNames(linkLabel, linkData);
    this.setClassActiveToNavLinks(linkIndex);
  }


  onClickLogout() {
    localStorage.removeItem('sessionObject');
    localStorage.removeItem('_AuthToken');
    this.router.navigate(['']);
  }


  setClassActiveToNavLinks(index: number) {
    setTimeout(() => {
      this.tabNavLinks._results.forEach(element => {
        element.nativeElement.classList.remove('active');
      });
      this.tabNavLinks._results[index].nativeElement.classList.add('active');
    }, 50);
  }


  setLinkDataNames(linkLabel: string, linkData: any) {
    this.tabLookNav = linkData;
    this.reportType = linkData.label;
    this.reportName = linkLabel;
  }


}
