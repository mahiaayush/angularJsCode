import { Component, OnInit, ViewChild } from '@angular/core';
import { BaseComponent, GridAPII } from '../../../acore/base';
import { GridApi, ColumnApi, ColDef, GridOptions } from 'ag-grid';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
// import { TabsComponent } from '../../../acore/components/ng-tabs';
import { Subject } from 'rxjs/Subject';
import { PadProjectService } from '../pad-project.service';
import { SearchTitleModel } from './search-title.model';
import { UrlConstants, SessionObject, ProjectUtils } from '../../../acore/utility';
import { DataDropDownOptions, AutoCompleteModel, TabsComponent } from '../../../acore/components';
import { columnDefsSearchTitle } from './search-title.data';
import { ConstantService, ProjectService } from '../../../acore/services';

@Component({
  selector: 'app-search-title',
  templateUrl: './search-title.component.html',
  styleUrls: ['./search-title.component.css']
})
export class SearchTitleComponent extends BaseComponent {
  NAME_SEARCH_TITLE = 'SEARCH_TITLE';
  searchTitleModel: SearchTitleModel;
  myNavData: any = {};
  activeLink: any = null;
  isShow: boolean;
  isVisible: boolean;

  @ViewChild('contentUploadList') contentUploadTemplate;
  @ViewChild('updateTitle') updateTitleTemplate;
  @ViewChild('history') historyTemplate;
  @ViewChild(TabsComponent) tabsComponent;
  gridOptionsSearchTitle: GridOptions = {};

  constructor(private padProjectService: PadProjectService,
    public constantService: ConstantService,
    protected projectService: ProjectService) {
    super(padProjectService, projectService);
    this.myNavData = constantService.routerNav.PAD_PROJECT;
    this.activeLink = constantService.routerNav.PAD_PROJECT.links[0];
    this.gridOptionsSearchTitle.onCellClicked = this.agCellClicked;
    this.isShow = false;
    this.isVisible = true;
  }




  agCellClicked = (event) => {

    const headerName: string = event.colDef.headerName;
    const row = event['data'];
    debugger
    if (headerName === 'ISBN') {
      this.openListTab(headerName);
      this.isShow = true;
      this.isVisible = false;
    }
    // else if (headerName === 'History') {
    //   this.isShow = true;
    //   this.isVisible = false;
    //   this.openListTab(headerName);

    // }

  }

  openListTab(headerName: any) {

    if (headerName === 'ISBN') {
      this.tabsComponent.openTab('Content Upload',
        this.contentUploadTemplate, {}, true, 'contentUploadTemplate');

      this.tabsComponent.openTab('Update Title',
        this.updateTitleTemplate, {}, true, 'updateTitleTemplate');
    }
    // else if (headerName === 'History') {
    //   this.tabsComponent.openTab('History',
    //     this.historyTemplate, {}, true, 'historyTemplate');
    // }
  }

  // openListTab1(headerName: any) {

  //   if (headerName === 'History') {
  //     this.tabsComponent.openTab('History',
  //       this.historyTemplate, {}, true, 'historyTemplate');
  //   }
  // }

  // getDownloadQueryURL(ext: string, fileName: string, name: string): string {
  //   const obj = {
  //     user_id: this.sessionObject.userDetails.userID,
  //     year: this.searchTitleModel.year.value,
  //     month: '02',
  //     report_name: fileName,
  //     // fileName + headerName
  //     report_format: ext
  //   };

  //   const retValue = ProjectUtils.obj_MakeQueryStringFromObj(obj);
  //   return UrlConstants.REPORTS_DOWNLOAD_REPORTS + retValue;
  // }

  xtBaseOnInit() {

  }

  initSearchModels() {
    this.searchTitleModel = new SearchTitleModel();
    const counterReportsSession = ProjectUtils.getCounterReports();
    // this.setValueFromSession(this.searchTitleModel, counterReportsSession);

  }


  getSearchModel(name: string) {
    if (name === this.NAME_SEARCH_TITLE) {
      return this.searchTitleModel;
    } else {
      return this.searchTitleModel;
    }
  }

  // getNonSearchModelParams(): string {
  //   const obj = {
  //     month: '01',
  //     screen: 'LIVE'
  //   };
  //   const queryString = ProjectUtils.obj_MakeQueryStringFromObjStartWithAND(obj);
  //   return queryString;
  // }

  setSearchModel(name: string) {
    const searchModel = this.getValueFromSearchModel(name);
    if (name === this.NAME_SEARCH_TITLE) {
      ProjectUtils.setCounterReports(searchModel);
    } else {
      ProjectUtils.setCounterReports(searchModel);
    }
  }


  setColumnDef(name: string): Array<ColDef> {
    if (name === this.NAME_SEARCH_TITLE) {
      return columnDefsSearchTitle;
    }
  }

  getServiceUrl(name): string {
    if (name === this.NAME_SEARCH_TITLE) {
      return UrlConstants.SEARCH_TITLE;
    }
  }

  doOnSubmit(e) {
    console.log('doOnSubmit', e);
    debugger
    this.OnSubmit(this.NAME_SEARCH_TITLE);

  }

  getGridApi(name: string): GridAPII {
    if (name === this.NAME_SEARCH_TITLE) {
      return {
        gridApi: this.gridApi,
        columnApi: this.columnApi
      };
    }
  }

  doOnGridReadySearchVenderReports(api) {
    this.gridApi = api.api;
    this.columnApi = api.columnApi;
    this.doOnGridReady(this.NAME_SEARCH_TITLE);

  }

}

